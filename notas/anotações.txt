// macro rust = !

// funcao println ----- macro println!

// fn ---- declaração de uma funçao.  ex.: // fn main() {}

// cargo new {nome_do_projeto} --bin ----- criar um novo projeto com o cargo

// cargo build ----- compila o codigo e cria um debug / executavel

// cargo run ---- compila e executa o codigo / cria executavel com a novo codigo

// cargo check ---- verificará rapidamente seu código para garantir que ele seja compilado corretamente ///sem criar um executavel

// use ---- importa uma biblioteca ex. // use std::io  // io == input, output, std == standart

---------------- criar variavel

// let {nome_variavel} = 5;  ----- / em rust todas as variaveis {let} são imutaveis por padrao

// let mut {nome_variavel} = 5 ----- / adicionando 'mut' na variavel tornamos ela mutavel

// podemos mudar a variavel por utilizar somente o let {nome_variavel} 

// nao podemos usar let mut {nome_variavel} para mudar o conteudo dela, gera erro


---------------- formatação numerica

// i32 ---- numeros 32bit sem sinal ----- u32 numeros 32bit com sinal ----- i64 numeros 64bit com sinal
 |
 |--> 2 tipos de dados
                |
                --> escalares: inteiro, float, boolean e strings // char aspas simples " '' " representa um valor unicode
                               |   i32-16-8 |        |
                               --> u32-16-8 |        |
                                            -->f32-64|
                                                     --> true-false

// tuplas podem ser acessadas por de .(ponto) ex.: let tup = ('pao',5,2.4);  // acessando index 2 // let i = tup.1

// matriz
    |
    --> são de tamanho fixo, nao mudam, nao aumenta nem diminui.

--------- funcoes

// nao termina com ";", se adicionar ";" na expressao transforma ela em declaracao e nao retorna o nd
ex.: let x = 5;
     let y = {
        let x = 3;
        x + 1
     }

// funcoes com retorno podemos expecificar o tp de dado que sera retornado com ex.:(-> i32)

--------- controle de fluxo : if, else, else if

// < > == !=  // podemos somente utilizar controle de fluxo com apenas o mesmo tipo de datatype ex.: i32 u32 f64
                                                   let condicao = true  // or false
// podemos utilizar if em uma declaracao let. ex.: let x = if {condicao} {
                                                                            5
                                                                        } else {
                                                                            6
                                                                        };
                                                            println!("o valor de numero eh: {x}")

-------- lacos de repeticao : loop , while e for

// loop - executa o bloco de codigo infinitamente ou ate q vc diga para ele parar (break)

// while - executa o bloco ate a condicao se tornar falsa  -- lento pois adiciona tempo de execucao de verificacao do bloco de codigo

// for - laco percore todos os elemetos de uma colecao (.iter()) para interagir com os itens de uma colecao

// .rev() inverte uma colecao ou qualquer lista de numeros passados ex.: 1..4 -- vira 4.

--------- Ownership (posse) --- controle de memoria

// regras  1.Cada valor em Rust possui uma variável que é dita seu owner (sua dona).
           2.Pode apenas haver um owner por vez.
           3.Quando o owner sai fora de escopo, o valor será destruído.
           4.Escopo = { codigo aki dentro }

// O tipo string

// s1 = String::from("textp") aloca 1 espaco na memoria; se s2 = s1 and println!(s1) erro pois o ownership troca para a s2 e s1 se torna invalida

// caso queira copiar explicitamente uma variavel ira custar espaco da memoria sendo assim: ex.: s1 = String::from("texto") ---- s2 = s1.clone() assim teremos 2 espacos alocadso com o mesmo dado

// clone() explicitamente mostra que teremos um custo na memoria do programa

 tipos de copy
// 
    Todos os tipos inteiros, como u32.
    O tipo booleano, bool, com valores true e false.
    O tipo caractere, char.
    Todos os tipos de ponto flutuante, como f64.
    Tuplas, mas apenas aquelas que contém tipos que também são Copy. (i32, i32) é Copy, mas (i32, String) não.
//

// "&" - referencia para manter a o valor da varaivel no escopo sem tranportala para outro espaco da memoria
ex.: s1 = String::from("texto"); tamanho = calcula_tamanho(&s1), ai assim poderemos utilizar s1 novamente no escopo~


